// /prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // pooled (6543) — uso do app
  directUrl = env("DIRECT_URL") // non-pooling (5432) — migrate/Studio
}

enum Role {
  ADMIN
  APPROVER
  CONTRIBUTOR
  READER
}

model Tenant {
  id          String       @id @default(uuid()) @db.Uuid
  slug        String       @unique
  displayName String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  memberships UserTenant[]
  Church      Church[]
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // Auth local
  passwordHash    String?   @map("password_hash")
  twoFactorSecret String?   @map("two_factor_secret")
  lastLoginAt     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts    Account[]
  sessions    Session[]
  memberships UserTenant[]
}

model UserTenant {
  id             String   @id @default(uuid()) @db.Uuid
  userId         String   @db.Uuid
  tenantId       String   @db.Uuid
  role           Role
  isPrimaryAdmin Boolean  @default(false)
  createdAt      DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId])
  @@index([tenantId])
}

/**
 * NextAuth v5 (@auth/prisma-adapter)
 */
model Account {
  id                 String  @id @default(cuid())
  userId             String  @db.Uuid
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Church {
  id     String @id @db.Uuid // = Tenant.id (1:1)
  tenant Tenant @relation(fields: [id], references: [id], onDelete: Cascade)

  name         String
  cnpj         String?   @db.VarChar(20)
  email        String?
  phone        String?
  website      String?
  addressLine  String?
  addressExtra String?
  district     String?
  city         String?
  state        String?
  country      String?
  postalCode   String?
  presbytery   String?
  organizedAt  DateTime?
  logoUrl      String?
  notes        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
